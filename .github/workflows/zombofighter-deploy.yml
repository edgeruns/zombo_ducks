name: Zombofighter CD
on:
  workflow_dispatch:
    inputs:
      api:
        type: boolean
        description: Deploy API
        default: false
      client:
        type: boolean
        description: Deploy client
        default: false

jobs:
  prepare:
    runs-on: self-hosted
    name: Prepare workflow
    outputs:
      matrix: ${{ steps.calc.outputs.result }}
    steps:
      - id: calc
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const projects = []
            if (${{ github.event.inputs.api }}) {
              projects.push('games-zombofighter-api')
            }
            if (${{ github.event.inputs.client }}) {
              projects.push('games-zombofighter-client')
            }

            return JSON.stringify(projects)


  ci:
    needs: prepare
    runs-on: self-hosted
    name: check and publish artefact
    strategy:
      matrix:
        project: ${{ fromJson(needs.prepare.outputs.matrix) }}
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Enable corepack
        run: corepack enable

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: npm run build ${{ matrix.project }} --production

      - name: Build version name
        run: echo "::set-output name=value::${{ github.ref_name }}-${{ github.sha }}"
        id: version

      - name: Docker build
        run: |
          docker build \
            -f ./docker/${{ matrix.project }}.Dockerfile \
            -t registry.digitalocean.com/crypto-animals/${{ matrix.project }}:${{ steps.version.outputs.value }} \
            .

      - name: Docker push
        run: |
          docker push registry.digitalocean.com/crypto-animals/${{ matrix.project }}:${{ steps.version.outputs.value }}


  deploy:
    needs: [prepare, ci]
    runs-on: self-hosted
    name: deploy ${{ matrix.project }}
    environment: production
    strategy:
      matrix:
        project: ${{ fromJson(needs.prepare.outputs.matrix) }}
    env:
      COMMIT_SHA: ${{ github.sha }}
      BRANCH: ${{ github.ref_name }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      REDIS_PASS: ${{ secrets.REDIS_PASS }}
      REDIS_USER: ${{ secrets.REDIS_USER }}
      REDIS_FULL: ${{ secrets.REDIS_FULL }}
      PRIVATE_NEAR_WALLET_KEY: ${{ secrets.PRIVATE_NEAR_WALLET_KEY }}

    steps:
      - name: Prepare deployment config
        run: |
          cd deploy/${{ matrix.project }} && envsubst < deployment.yml | tee tmp.yml &&\
          mv tmp.yml deployment.yml

      - name: Deploy
        run: kubectl apply -f deploy/${{ matrix.project }}/
